# -*- coding: utf-8 -*-
"""Rob√¥ Cantos Telegram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/198rL2kG1vfVOyPNaUcO22nNZvGy3Pk4D

Importar as Bibliotecas
"""

pip install python-time

pip install requests

pip install jsons

pip install beautifulsoup4

pip install python-telegram-bot

"""Requisi√ß√£o das bibliotecas"""

import time
import requests
import jsons
from bs4 import BeautifulSoup
# import telegram
import sys

"""Informa√ß√µes do Bot"""

token = '6031390458:AAFjcXSJc6J-xe-BcitIGCjSxqtYsq7fkiU'
chat_id = '-1001744827497'

"""Corpo do Bot"""

i = 0
registered_signals = {}

def get_nested(data, *args):
  if args and data:
    element  = args[0]
    if element:
      value = data.get(element)
      if value == None:
        return 0
      return value if len(args) == 1 else get_nested(value, *args[1:])

while True:
  try:
    url = "https://api.sportsanalytics.com.br/api/v1/fixtures-svc/fixtures/livescores"

    querystring = {"include":"weatherReport,additionalInfo,league,stats,pressureStats,probabilities"}
    payload = ""
    headers = {"cookie": "route=b755d42c4e5a7af0bbda5abf2e5758ce; SRVGROUP=common"}
    response = requests.request("GET", url, data=payload, headers=headers, params=querystring)
    dic_response = response.json()

    for game in dic_response['data']:
      date = game['date']

      # CurrentTime
      minute = get_nested(game, 'currentTime', 'minute')
      second = get_nested(game, 'currentTime', 'second')

      # Garante que um jogo √© sinalizado no m√°ximo uma vez por cada parte
      fixture_id = game['fixtureId']
      game_part = registered_signals.get(fixture_id, 0)
      if game_part == 1 and minute <= 45 or game_part == 2 and minute <= 90:
        continue

      # Team
      awayTeam = get_nested(game, 'awayTeam', 'name')
      homeTeam = get_nested(game, 'homeTeam', 'name')
      league = get_nested(game, 'league', 'name')

      # Scores
      homeTeamScore = get_nested(game, 'scores', 'homeTeamScore')
      awayTeamScore = get_nested(game, 'scores', 'awayTeamScore')

      # appm1
      appm1_home = get_nested(game, 'pressureStats', 'appm1', 'home')
      appm1_away = get_nested(game, 'pressureStats', 'appm1', 'away')

      # appm2
      appm2_home = get_nested(game, 'pressureStats', 'appm2', 'home')
      appm2_away = get_nested(game, 'pressureStats', 'appm2', 'away')

      # exg
      exg_home = get_nested(game, 'pressureStats', 'exg', 'home')
      exg_away = get_nested(game, 'pressureStats', 'exg', 'away')

      # mh1
      mh1_home = get_nested(game, 'pressureStats', 'mh1', 'home')
      mh1_away = get_nested(game, 'pressureStats', 'mh1', 'away')

      # mh2
      mh2_home = get_nested(game, 'pressureStats', 'mh2', 'home')
      mh2_away = get_nested(game, 'pressureStats', 'mh2', 'away')

      # mh3
      mh3_home = get_nested(game, 'pressureStats', 'mh3', 'home')
      mh3_away = get_nested(game, 'pressureStats', 'mh3', 'away')

      # attack_momentum
      attack_momentum_home = get_nested(game, 'pressureStats', 'attack_momentum', 'home')
      attack_momentum_away = get_nested(game, 'pressureStats', 'attack_momentum', 'away')
    
      # Corners
      corners_home = get_nested(game, 'stats', 'corners', 'home')
      corners_away = get_nested(game, 'stats', 'corners', 'away')

      # DangerousAttacks
      dangerousAttacks_home = get_nested(game, 'stats', 'dangerousAttacks', 'home')
      dangerousAttacks_away = get_nested(game, 'stats', 'dangerousAttacks', 'away')

      # ShotsOfgoal
      shotsOffgoal_home = get_nested(game, 'stats', 'shotsOffgoal', 'home')
      shotsOffgoal_away = get_nested(game, 'stats', 'shotsOffgoal', 'away')

      # ShotsOngoal
      shotsOngoal_home = get_nested(game, 'stats', 'shotsOngoal', 'home')
      shotsOngoal_away = get_nested(game, 'stats', 'shotsOngoal', 'away')

      # Yellowredcards
      yellowredcards_home = get_nested(game, 'stats', 'yellowredcards', 'home')
      yellowredcards_away = get_nested(game, 'stats', 'yellowredcards', 'away')

      # goalAttempts
      goalAttempts_home = get_nested(game, 'stats', 'goalAttempts', 'home')
      goalAttempts_away = get_nested(game, 'stats', 'goalAttempts', 'away')

      # yellowcards
      yellowcards_home = get_nested(game, 'stats', 'yellowcards', 'home')
      yellowcards_away = get_nested(game, 'stats', 'yellowcards', 'away')

      #redcards
      redcards_home = get_nested(game, 'stats', 'redcards', 'home')
      redcards_away = get_nested(game, 'stats', 'redcards', 'away')

      # fouls
      fouls_home = get_nested(game, 'stats', 'fouls', 'home')
      fouls_away = get_nested(game, 'stats', 'fouls', 'away')

      text = ''
      if (mh2_home >= 15 and exg_home == 2 and appm2_home >= 1.5) or (mh2_away >= 15 and exg_away == 2 and appm2_away >= 1.5):
        if minute >= 25 and minute <= 40 or minute >= 70 and minute <=85:
          part = 1
          if minute >= 70:
            part = 2
          registered_signals[fixture_id] = part
          
          text = '''üö®Alerta Cantosüö®:
        üìä + 2 Cantos

        üî∞Equipas: {} vs {}
        üìåCampeonato: {}
        ‚è∞Tempo de jogo: {}
        üìàPlacar: {} - {}
        üé≤Expetativa golo: {} - {}
        üî•Carga ofensiva: {} - {}
        ü•ÖOportunidade golos: {} - {}
        üí£Ataq perigosos √∫lt. 10min: {} - {}
        üéØRemates √† baliza: {} - {}
        üü®Cart√µes amarelos: {} - {}
        üü•Cart√µes vermelhos: {} - {}
        ‚õ≥Cantos: {} - {}'''.format(homeTeam, awayTeam, league, minute, homeTeamScore, awayTeamScore, exg_home, exg_away, mh2_home, mh2_away,
                                   mh1_home, mh1_away, appm2_home, appm2_away, shotsOngoal_home, shotsOngoal_away, yellowcards_home, yellowcards_away, 
                                   redcards_home, redcards_away, corners_home, corners_away)
        
      url_base = f'https://api.telegram.org/bot{token}/sendMessage?chat_id={chat_id}&text={text}'
      if len(text) > 0:
        results = requests.get(url_base)
    
    time.sleep(5) 

  except Exception:
    type, value, traceback = sys.exc_info()
    print('Error:  %s' % (value))